"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import rocbot.state_joint_msg_t

import rocbot.state_body_msg_t

class state_model_msg_t(object):
    __slots__ = ["timestamp", "id", "num_state_joints", "state_joints", "num_state_bodies", "state_bodies"]

    def __init__(self):
        self.timestamp = 0
        self.id = ""
        self.num_state_joints = 0
        self.state_joints = []
        self.num_state_bodies = 0
        self.state_bodies = []

    def encode(self):
        buf = BytesIO()
        buf.write(state_model_msg_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.timestamp))
        __id_encoded = self.id.encode('utf-8')
        buf.write(struct.pack('>I', len(__id_encoded)+1))
        buf.write(__id_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">i", self.num_state_joints))
        for i0 in range(self.num_state_joints):
            assert self.state_joints[i0]._get_packed_fingerprint() == rocbot.state_joint_msg_t._get_packed_fingerprint()
            self.state_joints[i0]._encode_one(buf)
        buf.write(struct.pack(">i", self.num_state_bodies))
        for i0 in range(self.num_state_bodies):
            assert self.state_bodies[i0]._get_packed_fingerprint() == rocbot.state_body_msg_t._get_packed_fingerprint()
            self.state_bodies[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != state_model_msg_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return state_model_msg_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = state_model_msg_t()
        self.timestamp = struct.unpack(">q", buf.read(8))[0]
        __id_len = struct.unpack('>I', buf.read(4))[0]
        self.id = buf.read(__id_len)[:-1].decode('utf-8', 'replace')
        self.num_state_joints = struct.unpack(">i", buf.read(4))[0]
        self.state_joints = []
        for i0 in range(self.num_state_joints):
            self.state_joints.append(rocbot.state_joint_msg_t._decode_one(buf))
        self.num_state_bodies = struct.unpack(">i", buf.read(4))[0]
        self.state_bodies = []
        for i0 in range(self.num_state_bodies):
            self.state_bodies.append(rocbot.state_body_msg_t._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if state_model_msg_t in parents: return 0
        newparents = parents + [state_model_msg_t]
        tmphash = (0x954fc32170750eb4+ rocbot.state_joint_msg_t._get_hash_recursive(newparents)+ rocbot.state_body_msg_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if state_model_msg_t._packed_fingerprint is None:
            state_model_msg_t._packed_fingerprint = struct.pack(">Q", state_model_msg_t._get_hash_recursive([]))
        return state_model_msg_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

