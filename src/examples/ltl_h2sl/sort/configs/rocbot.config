======== General Config ========

Actuator_Proposition_Mapping: # Mapping between actuator propositions and actuator handler functions
drop_left = rocbot.RocbotActionHandler.action_dispatch( action_type="ACTION_TYPE_DROP", [ ("OBJECT_TYPE_ROBOT_LEFT_HAND", "OBJECT_COLOR_UNKNOWN"), ("OBJECT_TYPE_CUBE","OBJECT_COLOR_BLUE"), ("OBJECT_TYPE_BIN", "OBJECT_COLOR_UNKNOWN") ] )
drop_right = rocbot.RocbotActionHandler.action_dispatch( action_type="ACTION_TYPE_DROP", [ ("OBJECT_TYPE_ROBOT_RIGHT_HAND", "OBJECT_COLOR_UNKNOWN"), ("OBJECT_TYPE_CUBE","OBJECT_COLOR_RED"), ("OBJECT_TYPE_BIN", "OBJECT_COLOR_UNKNOWN") ] )
pickup_red_right = rocbot.RocbotActionHandler.action_dispatch(action_type="ACTION_TYPE_PICKUP", objects=[ ("OBJECT_TYPE_ROBOT_RIGHT_HAND", "OBJECT_COLOR_UNKNOWN"), ("OBJECT_TYPE_CUBE", "OBJECT_COLOR_RED") , ("table", "OBJECT_COLOR_UNKNOWN")] )
pickup_red_left = rocbot.RocbotActionHandler.action_dispatch(action_type="ACTION_TYPE_PICKUP", objects=[ ("OBJECT_TYPE_ROBOT_RIGHT_HAND", "OBJECT_COLOR_UNKNOWN"), ("OBJECT_TYPE_CUBE", "OBJECT_COLOR_RED"), ("table", "OBJECT_COLOR_UNKNOWN") ] )
pickup_blue_right = rocbot.RocbotActionHandler.action_dispatch(action_type="ACTION_TYPE_PICKUP", objects=[ ("OBJECT_TYPE_ROBOT_LEFT_HAND", "OBJECT_COLOR_UNKNOWN"), ("OBJECT_TYPE_CUBE", "OBJECT_COLOR_BLUE"), ("table", "OBJECT_COLOR_UNKNOWN") ] )
pickup_blue_left = rocbot.RocbotActionHandler.action_dispatch(action_type="ACTION_TYPE_PICKUP", objects=[ ("OBJECT_TYPE_ROBOT_LEFT_HAND", "OBJECT_COLOR_UNKNOWN"), ("OBJECT_TYPE_CUBE", "OBJECT_COLOR_BLUE") , ("table", "OBJECT_COLOR_UNKNOWN")] )
help = rocbot.RocbotActionHandler.action_dispatch( action_type="ACTION_TYPE_INTERVENTION", objects=[])

Initial_Truths: # Initially true propositions

Main_Robot: # The name of the robot used for moving in this config
rocbot

Name: # Configuration name
rocbot

Region_Tags: # Mapping from tag names to region groups, for quantification
{}

Sensor_Proposition_Mapping: # Mapping between sensor propositions and sensor handler functions
blue_right = rocbot.RocbotSensorHandler.sensor_type_observed(object_type="OBJECT_TYPE_CUBE", object_color="OBJECT_COLOR_BLUE")
blue_left = rocbot.RocbotSensorHandler.sensor_type_observed(object_type="OBJECT_TYPE_CUBE", object_color="OBJECT_COLOR_BLUE")
right_bin_clear = rocbot.RocbotSensorHandler.sensor_type_clear(object_type="OBJECT_TYPE_BIN", object_color="OBJECT_COLOR_UNKNOWN")
red_right = rocbot.RocbotSensorHandler.sensor_type_observed(object_type="OBJECT_TYPE_CUBE", object_color="OBJECT_COLOR_RED")
left_bin_clear = rocbot.RocbotSensorHandler.sensor_type_clear(object_type="OBJECT_TYPE_BIN", object_color="OBJECT_COLOR_UNKNOWN")
red_left = rocbot.RocbotSensorHandler.sensor_type_observed(object_type="OBJECT_TYPE_CUBE", object_color="OBJECT_COLOR_RED")

======== Robot1 Config ========

CalibrationMatrix: #default, so it does not show warnings
array([[1, 0, 0],
       [0, 1, 0],
       [0, 0, 1]])

InitHandler: # Robot default init handler with default argument values
rocbot.RocbotInitHandler()

SensorHandler: # Rocbot simulator world state, triggers sensors
rocbot.RocbotSensorHandler()

ActionHandler: 
rocbot.RocbotActionHandler()

DriveHandler:
share.Drive.HolonomicDriveHandler(multiplier=50.0,maxspeed=999.0)

LocomotionCommandHandler:
rocbot.RocbotLocomotionCommandHandler(speed=1.0)

MotionControlHandler:
share.MotionControl.VectorControllerHandler()

PoseHandler:
rocbot.RocbotNullPoseHandler()

RobotName: # Robot Name
rocbot

Type: # Robot type
rocbot
