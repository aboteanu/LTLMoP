# This is a configuration definition file in folder "/home/adrian/ltl_h2sl/build/ltlmop/src/ltlmop/src/examples/ltl_h2sl/sort/configs".
# Format details are described at the beginning of each section below.


======== General Config ========

Actuator_Proposition_Mapping: # Mapping between actuator propositions and actuator handler functions
drop_left = rocbot.RocbotActionHandler.action_dispatch( action_type="ACTION_TYPE_DROP", [ (" ", "OBJECT_TYPE_ROBOT_LEFT_HAND", "OBJECT_COLOR_UNKNOWN"), (" ","OBJECT_TYPE_UNKNOWN","OBJECT_COLOR_UNKNOWN"), ("garbage_can1", "OBJECT_TYPE_BIN", "OBJECT_COLOR_UNKNOWN") ] )
drop_right = rocbot.RocbotActionHandler.action_dispatch( action_type="ACTION_TYPE_DROP", [ (" ","OBJECT_TYPE_ROBOT_RIGHT_HAND", "OBJECT_COLOR_UNKNOWN"), (" ", "OBJECT_TYPE_UNKNOWN","OBJECT_COLOR_UNKNOWN"), ("garbage_can1", "OBJECT_TYPE_BIN", "OBJECT_COLOR_UNKNOWN") ] )
pickup_red1 = rocbot.RocbotActionHandler.action_dispatch(action_type="ACTION_TYPE_PICKUP", objects=[ (" ", "OBJECT_TYPE_ROBOT_RIGHT_HAND", "OBJECT_COLOR_UNKNOWN"), ("redcube1","OBJECT_TYPE_CUBE", "OBJECT_COLOR_RED") , ("table", "OBJECT_TYPE_TABLE","OBJECT_COLOR_UNKNOWN")] )
pickup_blue1 = rocbot.RocbotActionHandler.action_dispatch(action_type="ACTION_TYPE_PICKUP", objects=[ (" ", "OBJECT_TYPE_ROBOT_LEFT_HAND", "OBJECT_COLOR_UNKNOWN"), ("bluecube1", "OBJECT_TYPE_CUBE", "OBJECT_COLOR_BLUE"), ("table", "OBJECT_TYPE_TABLE","OBJECT_COLOR_UNKNOWN") ] )
help = rocbot.RocbotActionHandler.action_dispatch( action_type="ACTION_TYPE_INTERVENTION", objects=[])
  
Initial_Truths: # Initially true propositions

Main_Robot: # The name of the robot used for moving in this config
rocbot

Name: # Configuration name
rocbot_009

Region_Tags: # Mapping from tag names to region groups, for quantification
{}

Sensor_Proposition_Mapping: # Mapping between sensor propositions and sensor handler functions
blue1 = rocbot.RocbotSensorHandler.sensor_type_observed(object_type="OBJECT_TYPE_CUBE", object_color="OBJECT_COLOR_BLUE")
right_bin_clear = rocbot.RocbotSensorHandler.sensor_type_clear(object_type="OBJECT_TYPE_BIN", object_color="OBJECT_COLOR_UNKNOWN")
red1 = rocbot.RocbotSensorHandler.sensor_type_observed(object_type="OBJECT_TYPE_CUBE", object_color="OBJECT_COLOR_RED")
left_bin_clear = rocbot.RocbotSensorHandler.sensor_type_clear(object_type="OBJECT_TYPE_BIN", object_color="OBJECT_COLOR_UNKNOWN")


======== Robot1 Config ========

CalibrationMatrix: # 3x3 matrix for converting coordinates, stored as lab->map
array([[1, 0, 0],
       [0, 1, 0],
       [0, 0, 1]])

DriveHandler: # Input value for robot drive handler, refer to file inside the handlers/drive folder
share.Drive.HolonomicDriveHandler(multiplier=50.0,maxspeed=999.0)

InitHandler: # Input value for robot init handler, refer to the init file inside the handlers/robots/Type folder
rocbot.RocbotInitHandler()

LocomotionCommandHandler: # Input value for robot locomotion command handler, refer to file inside the handlers/robots/Type folder
rocbot.RocbotLocomotionCommandHandler(speed=1.0)

MotionControlHandler: # Input value for robot motion control handler, refer to file inside the handlers/motionControl folder
share.MotionControl.VectorControllerHandler()

PoseHandler: # Input value for robot pose handler, refer to file inside the handlers/pose folder
rocbot.RocbotNullPoseHandler()

RobotName: # Robot Name
rocbot

Type: # Robot type
rocbot

