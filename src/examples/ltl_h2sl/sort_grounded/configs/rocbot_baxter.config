======== General Config ======== 
Initial_Truths: # Initially true propositions 

Main_Robot: # The name of the robot used for moving in this config 
rocbot_baxter 

Name: # Configuration name 
rocbot_baxter 

Region_Tags: # Mapping from tag names to region groups, for quantification 
{} 

Sensor_Proposition_Mapping:
blue= rocbot_baxter.RocbotBaxterSensorHandler.sensor_type_observed(object_ids = ["bluecube1","bluecube1","bluecube2","bluecube2","bluecube2"] )
red= rocbot_baxter.RocbotBaxterSensorHandler.sensor_type_observed(object_ids = ["redcube1","redcube1","redcube1","redcube1","redcube1"] )
right_bin_clear = rocbot_baxter.RocbotBaxterSensorHandler.sensor_type_clear( object_ids = ["garbage_can2"] )
left_bin_clear = rocbot_baxter.RocbotBaxterSensorHandler.sensor_type_clear(object_ids = ["garbage_can1"] )

Actuator_Proposition_Mapping:
pickup_right = rocbot_baxter.RocbotBaxterActionHandler.action_dispatch( gripper="right", action_type = "ACTION_TYPE_PICKUP", object_ids = ["na","bluecube1","na","bluecube1","na","bluecube2"] ) 
pickup_right = rocbot_baxter.RocbotBaxterActionHandler.action_dispatch( gripper="right", action_type = "ACTION_TYPE_PICKUP", object_ids = ["na","bluecube2","na","bluecube2","na","redcube1","na","redcube1"] ) 
pickup_right = rocbot_baxter.RocbotBaxterActionHandler.action_dispatch( gripper="right", action_type = "ACTION_TYPE_PICKUP", object_ids = ["na","garbage_can2","na","garbage_can2","na","garbage_can2"] ) 
pickup_left = rocbot_baxter.RocbotBaxterActionHandler.action_dispatch( gripper="left", action_type = "ACTION_TYPE_PICKUP", object_ids = ["na","garbage_can1","na","garbage_can1"] ) 
pickup_left = rocbot_baxter.RocbotBaxterActionHandler.action_dispatch( gripper="left", action_type = "ACTION_TYPE_PICKUP", object_ids = ["na","bluecube2","na","bluecube2","na","redcube1","na","redcube1"] ) 
pickup_left = rocbot_baxter.RocbotBaxterActionHandler.action_dispatch( gripper="left", action_type = "ACTION_TYPE_PICKUP", object_ids = ["na","redcube1","na","redcube1","na","redcube1"] ) 
help = rocbot_baxter.RocbotBaxterActionHandler.action_dispatch( gripper = "", action_type = "ACTION_TYPE_INTERVENTION", object_ids = [] ) 
drop_left = rocbot_baxter.RocbotBaxterActionHandler.action_dispatch( gripper = "left", action_type = "ACTION_TYPE_DROP", object_ids = ["garbage_can1"] ) 
drop_right = rocbot_baxter.RocbotBaxterActionHandler.action_dispatch( gripper = "right", action_type = "ACTION_TYPE_DROP", object_ids = ["garbage_can2"] ) 

======== Robot1 Config ======== 
CalibrationMatrix: # 3x3 matrix for converting coordinates, stored as lab->map 
array([[1, 0, 0], 
       [0, 1, 0], 
       [0, 0, 1]]) 
 
SensorHandler: # RocbotBaxter simulator world state, triggers sensors 
rocbot_baxter.RocbotBaxterSensorHandler() 
 
ActuatorHandler: 
rocbot_baxter.RocbotBaxterActionHandler() 
 
DriveHandler: # Input value for robot drive handler, refer to file inside the handlers/drive folder 
share.Drive.HolonomicDriveHandler(multiplier=50.0,maxspeed=999.0) 
 
InitHandler: # Input value for robot init handler, refer to the init file inside the handlers/robots/Type folder 
rocbot_baxter.RocbotBaxterInitHandler() 
 
LocomotionCommandHandler: # Input value for robot locomotion command handler, refer to file inside the handlers/robots/Type folder 
rocbot_baxter.RocbotBaxterLocomotionCommandHandler(speed=1.0) 
 
MotionControlHandler: # Input value for robot motion control handler, refer to file inside the handlers/motionControl folder 
share.MotionControl.VectorControllerHandler() 
 
PoseHandler: # Input value for robot pose handler, refer to file inside the handlers/pose folder 
rocbot_baxter.RocbotBaxterNullPoseHandler() 
 
RobotName: # Robot Name 
rocbot_baxter 
 
Type: # Robot type 
rocbot_baxter 
